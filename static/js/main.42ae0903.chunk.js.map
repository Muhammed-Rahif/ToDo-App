{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","textField","setTextField","toDos","setToDos","canceledToDos","setRemovedToDos","className","type","id","value","onChange","e","target","onSubmit","preventDefault","onClick","document","getElementById","focus","newToDo","content","time","moment","format","Date","getTime","status","map","itm","autoComplete","filter","obj","checked","htmlFor","window","confirm","scope","length","colSpan","data-mdb-toggle","data-mdb-target","aria-expanded","aria-controls","aria-labelledby","data-mdb-parent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.42ae0903.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport \"./App.css\";\n\nfunction App() {\n  const [textField, setTextField] = useState(\"\");\n  const [toDos, setToDos] = useState([]);\n  const [canceledToDos, setRemovedToDos] = useState([]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"row mt-5 \">\n        <form>\n          <div className=\"shadow-3 input-group input-group-lg\">\n            <span className=\"shadow-3 input-group-text\">To Do :</span>\n            <input\n              type=\"text\"\n              className=\"shadow-3 form-control\"\n              id=\"textInput\"\n              value={textField}\n              onChange={(e) => {\n                setTextField(e.target.value);\n              }}\n            />\n            <button\n              type=\"submit\"\n              className=\"shadow-3 btn btn-primary\"\n              onSubmit={e => {\n                e.preventDefault();\n              }}\n              onClick={(e) => {\n                e.preventDefault();\n                if (textField === null || textField === \" \" || textField === \"\") {\n                  document.getElementById(\"textInput\").focus();\n                } else {\n                  var newToDo = {\n                    content: textField,\n                    time: moment().format(\"LLLL\"),\n                    id: new Date().getTime(),\n                    status: false,\n                  };\n                  setToDos([...toDos, newToDo]);\n                  setTextField(\"\");\n                  document.getElementById(\"textInput\").focus();\n                }\n              }}\n            >\n              Add\n          </button>\n          </div>\n        </form>\n        <div className=\"col-md-12 mt-3 mb-3\">\n          {toDos.map((itm) => {\n            return (\n              <div key={itm.id} className=\"shadow-3 mt-2 card border\">\n                <div className=\"shadow-3 card-body\">\n                  {itm.content}\n                  <div className=\"float-end\">\n                    <input type=\"checkbox\" className=\"btn-check\" id={`btn-check-${itm.id}`} autoComplete=\"off\"\n                      onChange={(e) => {\n                        setToDos(toDos.filter(obj => {\n                          if (obj.id === itm.id) {\n                            obj.status = e.target.checked;\n                          }\n                          return obj;\n                        }))\n                      }}\n                    />\n                    <label className=\"btn btn-success mr-1\" htmlFor={`btn-check-${itm.id}`}><i className=\"shadow-3 fas fa-check\"></i></label>\n                    <button type=\"button\" className=\"btn btn-danger\"\n                      onClick={() => {\n                        if (window.confirm(\"Are you sure you want to remove this ?\")) {\n                          setRemovedToDos((canceledToDos) => [...canceledToDos, itm]);\n                          setToDos(toDos.filter(obj => {\n                            if (obj.id !== itm.id) {\n                              return obj;\n                            }\n                            return null;\n                          }))\n                        }\n                      }}\n                    ><i className=\"fas fa-trash\"></i></button>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"col-md-12\">\n          <h4 className=\"text-center\">Active ToDos</h4>\n          <hr className=\"hr\" />\n          <table className=\"shadow-1-strong table table-hover table-responsive table-bordered mt-2 mb-5\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Time</th>\n                <th scope=\"col\">To Do</th>\n                <th scope=\"col\">Completed</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                toDos.length !== 0 ?\n                  toDos.map((itm) => {\n                    return (\n                      <tr key={itm.id}>\n                        <th scope=\"row\">{itm.time}</th>\n                        <td>{itm.content}</td>\n                        <td>\n                          {itm.status ? (\n                            <i className=\"shadow-3 fas fa-check text-success\"></i>\n                          ) : (\n                            <i className=\"shadow-3 fas fa-times text-danger\"></i>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  }) : <tr><td colSpan={3} className=\"text-center\">Empty</td></tr>}\n            </tbody>\n          </table>\n        </div>\n      </div>\n      <div className=\"shadow-3 row\">\n        <div className=\"shadow-3 col-md-12\">\n          <div className=\"shadow-1-strong accordion mb-5\" id=\"accordionExample\">\n            <div className=\"accordion-item\">\n              <h2 className=\"accordion-header\" id=\"headingOne\">\n                <button\n                  className=\"shadow-3 accordion-button collapsed\"\n                  type=\"button\"\n                  data-mdb-toggle=\"collapse\"\n                  data-mdb-target=\"#collapseOne\"\n                  aria-expanded=\"false\"\n                  aria-controls=\"collapseOne\"\n                >\n                  Removed To Dos\n                </button>\n              </h2>\n              <div\n                id=\"collapseOne\"\n                className=\"shadow-3 accordion-collapse collapse\"\n                aria-labelledby=\"headingOne\"\n                data-mdb-parent=\"#accordionExample\"\n              >\n                <div className=\"shadow-3 accordion-body\">\n                  <table className=\"shadow-1 table table-hover table-responsive table-bordered\">\n                    <thead>\n                      <tr>\n                        <th scope=\"col\">Time</th>\n                        <th scope=\"col\">To Do</th>\n                        <th scope=\"col\">Completed</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {canceledToDos.map((itm) => {\n                        return (\n                          <tr key={itm.id}>\n                            <th scope=\"row\">{itm.time}</th>\n                            <td>{itm.content}</td>\n                            <td>\n                              {itm.status ? (\n                                <i className=\"shadow-3 fas fa-check text-success\"></i>\n                              ) : (\n                                <i className=\"shadow-3 fas fa-times text-danger\"></i>\n                              )}\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}